basePath: /
definitions:
  handlers.CreateDomainRequest:
    properties:
      coverage:
        enum:
        - begins
        - ends
        - equals
        - contains
        example: equals
        type: string
      name:
        example: gmail.com
        type: string
      type:
        enum:
        - blacklist
        - whitelist
        - undefined
        example: whitelist
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      code:
        type: integer
      error: {}
      message:
        type: string
    type: object
  handlers.FilterCreateRequest:
    properties:
      coverage:
        example: equals
        type: string
      name:
        example: gmail.com
        type: string
      projectToken:
        example: 38fa45ebb919g5d966122bf9g42a38ceb1e4f6eddf1da70ef00afbdc38197d8f
        type: string
      type:
        example: whitelist
        type: string
    type: object
  handlers.FilterUpdateRequest:
    properties:
      coverage:
        example: equals
        type: string
      type:
        example: whitelist
        type: string
    type: object
  handlers.InspectRequestPayload:
    properties:
      clientIp:
        type: string
      data:
        type: string
    type: object
  handlers.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  handlers.UpdateDomainRequest:
    properties:
      coverage:
        enum:
        - begins
        - ends
        - equals
        - contains
        example: equals
        type: string
      type:
        enum:
        - blacklist
        - whitelist
        - undefined
        example: whitelist
        type: string
    type: object
  models.Domain:
    properties:
      coverage:
        example: equals
        type: string
      name:
        example: gmail.com
        type: string
      type:
        example: whitelist
        type: string
    type: object
  models.Review:
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      name:
        example: gmail.com
        type: string
      type:
        example: whitelist
        type: string
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
host: gw.verifire.dev/checkmail
info:
  contact:
    name: Artem Kostenko
    url: https://github.com/aerosystems
  description: A part of microservice infrastructure, who responsible for store and
    check email domains in black/whitelists
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Checkmail Service
  version: 1.0.7
paths:
  /v1/domains:
    post:
      consumes:
      - application/json
      parameters:
      - description: raw request body
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDomainRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Domain'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: create domain
      tags:
      - domains
  /v1/domains/{domainName}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Domain Name
        in: path
        name: domainName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: delete domain by Domain Name
      tags:
      - domains
    get:
      consumes:
      - application/json
      parameters:
      - description: Domain Name
        in: path
        name: domainName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Domain'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: get domain by Domain Name
      tags:
      - domains
    patch:
      consumes:
      - application/json
      parameters:
      - description: Domain Name
        in: path
        name: domainName
        required: true
        type: string
      - description: raw request body
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateDomainRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Domain'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: update domain by Domain Name
      tags:
      - domains
  /v1/domains/count:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: count Domains
      tags:
      - domains
  /v1/filters:
    get:
      consumes:
      - application/json
      description: 'Get Filter List for all user Projects. Roles allowed: business,
        staff'
      parameters:
      - description: user id
        in: query
        name: userId
        type: integer
      - description: project token
        in: query
        name: projectToken
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Filter List
      tags:
      - Filter
    post:
      consumes:
      - application/json
      description: 'Create Filter for ProjectRPCPayload. Roles allowed: business,
        staff'
      parameters:
      - description: raw request body
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handlers.FilterCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Filter
      tags:
      - Filter
  /v1/filters/{filterId}:
    delete:
      consumes:
      - application/json
      description: 'Delete Filter for ProjectRPCPayload by projectId. Roles allowed:
        business, staff'
      parameters:
      - description: filter id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Filter
      tags:
      - Filter
    put:
      consumes:
      - application/json
      description: 'Update Filter for ProjectRPCPayload by projectId. Roles allowed:
        business, staff'
      parameters:
      - description: filter id
        in: query
        name: id
        required: true
        type: integer
      - description: raw request body
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handlers.FilterUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Filter
      tags:
      - Filter
  /v1/inspect:
    post:
      consumes:
      - application/json
      parameters:
      - description: api key
        in: header
        name: X-Api-Key
        required: true
        type: string
      - description: raw request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.InspectRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: get information about domain name or email address
      tags:
      - inspect
  /v1/reviews:
    post:
      consumes:
      - application/json
      parameters:
      - description: raw request body
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDomainRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handlers.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Review'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: create top domain
      tags:
      - topDomains
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Should contain Access JWT Token, with the Bearer started
    in: header
    name: Authorization
    type: apiKey
  X-Api-Key:
    description: Should contain Token, digits and letters, 64 symbols length
    in: header
    name: X-Api-Key
    type: apiKey
swagger: "2.0"
