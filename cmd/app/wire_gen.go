// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cloud.google.com/go/firestore"
	"context"
	"firebase.google.com/go/auth"
	"github.com/aerosystems/checkmail-service/internal/common/custom_errors"
	"github.com/aerosystems/checkmail-service/internal/config"
	"github.com/aerosystems/checkmail-service/internal/infrastructure/repository/fire"
	"github.com/aerosystems/checkmail-service/internal/infrastructure/repository/pg"
	"github.com/aerosystems/checkmail-service/internal/presenters/http"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/handlers"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/handlers/access"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/handlers/check"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/handlers/domain"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/handlers/filter"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/handlers/review"
	"github.com/aerosystems/checkmail-service/internal/presenters/http/middleware"
	"github.com/aerosystems/checkmail-service/internal/presenters/rpc"
	"github.com/aerosystems/checkmail-service/internal/usecases"
	"github.com/aerosystems/checkmail-service/pkg/firebase"
	"github.com/aerosystems/checkmail-service/pkg/gorm_postgres"
	"github.com/aerosystems/checkmail-service/pkg/logger"
	"github.com/labstack/echo/v4"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	httpErrorHandler := ProvideErrorHandler(config)
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	entry := ProvideLogrusEntry(logger)
	db := ProvideGormPostgres(entry, config)
	domainRepo := ProvideDomainRepo(db)
	rootDomainRepo := ProvideRootDomainRepo(db)
	domainUsecase := ProvideDomainUsecase(domainRepo, rootDomainRepo)
	handler := ProvideDomainHandler(baseHandler, domainUsecase)
	filterRepo := ProvideFilterRepo(db)
	filterUsecase := ProvideFilterUsecase(rootDomainRepo, filterRepo)
	filterHandler := ProvideFilterHandler(baseHandler, filterUsecase)
	inspectUsecase := ProvideInspectUsecase(logrusLogger, domainRepo, rootDomainRepo, filterRepo)
	checkHandler := ProvideCheckHandler(baseHandler, inspectUsecase)
	reviewRepo := ProvideReviewRepo(db)
	reviewUsecase := ProvideReviewUsecase(reviewRepo, rootDomainRepo)
	reviewHandler := ProvideReviewHandler(baseHandler, reviewUsecase)
	client := ProvideFirestoreClient(config)
	apiAccessRepo := ProvideApiAccessRepo(client)
	accessUsecase := ProvideAccessUsecase(apiAccessRepo)
	accessHandler := ProvideAccessHandler(accessUsecase)
	handlers := ProvideHTTPServerHandlers(handler, filterHandler, checkHandler, reviewHandler, accessHandler)
	authClient := ProvideFirebaseAuthClient(config)
	firebaseAuth := ProvideFirebaseAuthMiddleware(authClient)
	apiKeyAuth := ProvideApiKeyMiddleware(accessUsecase)
	middlewares := ProvideHTTPServerMiddlewares(firebaseAuth, apiKeyAuth)
	server := ProvideHttpServer(config, logrusLogger, httpErrorHandler, handlers, middlewares)
	rpcServerServer := ProvideRpcServer(logrusLogger, inspectUsecase)
	app := ProvideApp(logrusLogger, config, server, rpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server, rpcServer *RpcServer.Server) *App {
	app := NewApp(log, cfg, httpServer, rpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideRpcServer(log *logrus.Logger, inspectUsecase RpcServer.InspectUsecase) *RpcServer.Server {
	server := RpcServer.NewServer(log, inspectUsecase)
	return server
}

func ProvideDomainHandler(baseHandler *handlers.BaseHandler, domainUsecase handlers.DomainUsecase) *domain.Handler {
	handler := domain.NewHandler(baseHandler, domainUsecase)
	return handler
}

func ProvideFilterHandler(baseHandler *handlers.BaseHandler, filterUsecase handlers.FilterUsecase) *filter.Handler {
	handler := filter.NewHandler(baseHandler, filterUsecase)
	return handler
}

func ProvideCheckHandler(baseHandler *handlers.BaseHandler, inspectUsecase handlers.InspectUsecase) *check.Handler {
	handler := check.NewHandler(baseHandler, inspectUsecase)
	return handler
}

func ProvideReviewHandler(baseHandler *handlers.BaseHandler, reviewUsecase handlers.ReviewUsecase) *review.Handler {
	handler := review.NewHandler(baseHandler, reviewUsecase)
	return handler
}

func ProvideDomainUsecase(domainRepo usecases.DomainRepository, rootDomainRepo usecases.RootDomainRepository) *usecases.DomainUsecase {
	domainUsecase := usecases.NewDomainUsecase(domainRepo, rootDomainRepo)
	return domainUsecase
}

func ProvideFilterUsecase(rootDomainRepo usecases.RootDomainRepository, filterRepo usecases.FilterRepository) *usecases.FilterUsecase {
	filterUsecase := usecases.NewFilterUsecase(rootDomainRepo, filterRepo)
	return filterUsecase
}

func ProvideInspectUsecase(log *logrus.Logger, domainRepo usecases.DomainRepository, rootDomainRepo usecases.RootDomainRepository, filterRepo usecases.FilterRepository) *usecases.InspectUsecase {
	inspectUsecase := usecases.NewInspectUsecase(log, domainRepo, rootDomainRepo, filterRepo)
	return inspectUsecase
}

func ProvideReviewUsecase(domainReviewRepo usecases.ReviewRepository, rootDomainRepo usecases.RootDomainRepository) *usecases.ReviewUsecase {
	reviewUsecase := usecases.NewReviewUsecase(domainReviewRepo, rootDomainRepo)
	return reviewUsecase
}

func ProvideDomainRepo(db *gorm.DB) *pg.DomainRepo {
	domainRepo := pg.NewDomainRepo(db)
	return domainRepo
}

func ProvideRootDomainRepo(db *gorm.DB) *pg.RootDomainRepo {
	rootDomainRepo := pg.NewRootDomainRepo(db)
	return rootDomainRepo
}

func ProvideFilterRepo(db *gorm.DB) *pg.FilterRepo {
	filterRepo := pg.NewFilterRepo(db)
	return filterRepo
}

func ProvideReviewRepo(db *gorm.DB) *pg.ReviewRepo {
	reviewRepo := pg.NewReviewRepo(db)
	return reviewRepo
}

func ProvideApiAccessRepo(client *firestore.Client) *fire.ApiAccessRepo {
	apiAccessRepo := fire.NewApiAccessRepo(client)
	return apiAccessRepo
}

func ProvideAccessUsecase(apiAccessRepo usecases.ApiAccessRepository) *usecases.AccessUsecase {
	accessUsecase := usecases.NewAccessUsecase(apiAccessRepo)
	return accessUsecase
}

func ProvideApiKeyMiddleware(accessUsecase middleware.AccessUsecase) *middleware.ApiKeyAuth {
	apiKeyAuth := middleware.NewApiKeyAuth(accessUsecase)
	return apiKeyAuth
}

func ProvideAccessHandler(accessUsecase handlers.AccessUsecase) *access.Handler {
	handler := access.NewHandler(accessUsecase)
	return handler
}

// wire.go:

func ProvideHttpServer(cfg *config.Config, log *logrus.Logger, errorHandler *echo.HTTPErrorHandler, handlers2 HttpServer.Handlers, middlewares HttpServer.Middlewares) *HttpServer.Server {
	return HttpServer.NewServer(cfg.WebPort, log, errorHandler, handlers2, middlewares)
}

func ProvideLogrusEntry(log *logger.Logger) *logrus.Entry {
	return logrus.NewEntry(log.Logger)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGormPostgres(e *logrus.Entry, cfg *config.Config) *gorm.DB {
	db := GormPostgres.NewClient(e, cfg.PostgresDSN)
	return db
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *handlers.BaseHandler {
	return handlers.NewBaseHandler(log, cfg.Mode)
}

func ProvideFirestoreClient(cfg *config.Config) *firestore.Client {
	ctx := context.Background()
	client, err := firestore.NewClient(ctx, cfg.GcpProjectId)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideFirebaseAuthClient(cfg *config.Config) *auth.Client {
	app, err := firebaseApp.NewApp(cfg.GcpProjectId, cfg.GoogleApplicationCredentials)
	if err != nil {
		panic(err)
	}
	return app.Client
}

func ProvideFirebaseAuthMiddleware(client *auth.Client) *middleware.FirebaseAuth {
	return middleware.NewFirebaseAuth(client)
}

func ProvideErrorHandler(cfg *config.Config) *echo.HTTPErrorHandler {
	errorHandler := CustomErrors.NewEchoErrorHandler(cfg.Mode)
	return &errorHandler
}

func ProvideHTTPServerHandlers(domainHandler *domain.Handler, filterHandler *filter.Handler, checkHandler *check.Handler, reviewHandler *review.Handler, accessHandler *access.Handler) HttpServer.Handlers {
	return HttpServer.Handlers{
		DomainHandler: domainHandler,
		FilterHandler: filterHandler,
		CheckHandler:  checkHandler,
		ReviewHandler: reviewHandler,
		AccessHandler: accessHandler,
	}
}

func ProvideHTTPServerMiddlewares(firebaseAuthMiddleware *middleware.FirebaseAuth, apiKeyAuthMiddleware *middleware.ApiKeyAuth) HttpServer.Middlewares {
	return HttpServer.Middlewares{
		FirebaseAuthMiddleware: firebaseAuthMiddleware,
		ApiKeyAuthMiddleware:   apiKeyAuthMiddleware,
	}
}
